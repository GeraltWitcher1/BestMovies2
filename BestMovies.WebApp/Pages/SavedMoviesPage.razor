@page "/{userEmail}/watch-list"

@implements IDisposable

@using BestMovies.WebApp.Repositories
@using BestMovies.WebApp.Services
@using BestMovies.Shared.Dtos.Movies
@using BestMovies.Shared.Validators
@using BestMovies.WebApp.Authorization
@using BestMovies.WebApp.Components
@using EventHandler = BestMovies.WebApp.Services.EventHandler

<PageTitle>Watch list</PageTitle>

<MudContainer Class="d-flex flex-column gap-4 justify-center pa-4" MaxWidth="MaxWidth.Large">
    <MudText Typo="Typo.h6" Align="Align.Start">User <strong>@UserEmail</strong>'s watch list</MudText>
</MudContainer>

<MudContainer Class="d-flex flex-column gap-4 justify-center pa-4" MaxWidth="MaxWidth.ExtraExtraLarge">
    @if (_isFetching)
    {
        <MudProgressLinear Indeterminate="true"/>
    }
    
    <MovieCardList Title="Want To Watch" Movies="_wantToWatchMovies" ShowMessageIfEmpty="true" SkeletonCardsCount="5"/>
    
    <MovieCardList Title="Watched" Movies="_watchedMovies" ShowMessageIfEmpty="true" SkeletonCardsCount="5">
        <MovieCardTemplate>
            <WatchedMovieCard LoadLazy="@context.LoadLazy" Movie="@context.Movie" Width="@context.Width" Height="@context.Height"/>
        </MovieCardTemplate>
    </MovieCardList>
</MudContainer>

@code {
    [Inject]
    protected EventHandler EventHandler { get; set; } = default!;

    [Inject]
    protected ISavedMoviesRepository SavedMoviesRepository { get; set; } = default!;

    [Inject]
    protected IAuthService AuthService { get; set; } = default!;

    [Inject]
    protected ISnackbar Snackbar { get; set; } = default!;
    
    [Inject]
    protected NavigationManager Navigation { get; set; } = default!;

    [Parameter]
    public string UserEmail { get; set; } = default!;

    private IEnumerable<SearchMovieDto>? _watchedMovies;
    private IEnumerable<SearchMovieDto>? _wantToWatchMovies;

    private UserInformation? _userInformation;
    private readonly EmailValidator _emailValidator = new();

    private bool _isFetching;

    protected override async Task OnInitializedAsync()
    {
        EventHandler.OnChange += OnChange;

        if (!await ValidateUserEmail()) return;

        await FetchData();
    }

    protected override async Task OnParametersSetAsync() => await FetchData();

    private async Task FetchData()
    {
        _isFetching = true;
        await InvokeAsync(StateHasChanged);
        
        var tasks = new[]
        {
            FetchWatchedMovies(),
            FetchWantToWatchMovies(),
            FetchUserInfo()
        };

        await Task.WhenAll(tasks);
        
        _isFetching = false;
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task FetchUserInfo() => _userInformation = await AuthService.RetrieveUserInformation();
    private async Task FetchWatchedMovies() => _watchedMovies = await SavedMoviesRepository.GetSavedMoviesForUser(UserEmail ,isWatched: true);
    private async Task FetchWantToWatchMovies() => _wantToWatchMovies = await SavedMoviesRepository.GetSavedMoviesForUser(UserEmail, isWatched: false);

    private async Task<bool> ValidateUserEmail()
    {
        var result = await _emailValidator.ValidateAsync(UserEmail);
        if (!result.IsValid)
        {
            Snackbar.Add("Invalid email address. Redirecting to home page.", Severity.Error);
            Navigation.NavigateTo("/");
        }

        return result.IsValid;
    }
    
    private async void OnChange()
    {
        var tasks = new[]
        {
            FetchWatchedMovies(),
            FetchWantToWatchMovies()
        };

        await Task.WhenAll(tasks);
        StateHasChanged();
    }
    
    public void Dispose() => EventHandler.OnChange -= OnChange;
}