@page "/"
@page "/movies"

@using BestMovies.WebApp.Repositories
@using BestMovies.WebApp.Components
@using BestMovies.Shared.Dtos.Movies

<PageTitle>Movies</PageTitle>

<MudContainer Class="d-flex flex-column gap-4 justify-center pa-4" MaxWidth="MaxWidth.ExtraExtraLarge">
    <MovieCardList Title="Popular now" Movies="_popularMovies" SkeletonCardsCount="5"/>
</MudContainer>

@foreach (var moviePerGenre in _moviesPerGenre)
{
    <MudContainer Class="d-flex flex-column gap-4 justify-center pa-4" MaxWidth="MaxWidth.ExtraExtraLarge">
        <MovieCardList Title= "@moviePerGenre.genre" Movies="@moviePerGenre.movies" SkeletonCardsCount="5"/>
    </MudContainer>
}

@code {

    [Inject]
    protected IMoviesRepository MoviesRepository { get; set; } = default!;
    [Inject]
    protected IGenresRepository GenresRepository { get; set; } = default!;

    private IEnumerable<SearchMovieDto>? _popularMovies;
    private (string genre, IEnumerable<SearchMovieDto> movies)[]? _moviesPerGenre;

    protected override async Task OnInitializedAsync()
    {
        _popularMovies = await MoviesRepository.GetPopularMovies();

        var genres = await GenresRepository.GetAllGenres();
        var genresToSearch = new[] {"Action", "Comedy", "Horror", "Drama"};
        
        var tasks = genres
            .Where(g => genresToSearch.Contains(g))
            .Select(async g => (g, await MoviesRepository.GetPopularMovies(g)));

        _moviesPerGenre = await Task.WhenAll(tasks);
        
        StateHasChanged();
    }

}