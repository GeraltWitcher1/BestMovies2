@using BestMovies.Shared.Dtos.Movies
@using BestMovies.WebApp.Helpers
@using BestMovies.WebApp.Repositories
@using System.Globalization
@using BestMovies.WebApp.Authorization
@using BestMovies.WebApp.Services

<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="d-flex flex-column justify-start gap-2 px-8 py-4" Style="overflow-y: auto;">

            <MudImage Class="rounded" ObjectFit="@ObjectFit.Cover" Height="400" Src="@($"api/movies/{MovieId}/image?size=original")" Alt="Movie Image"/>

            <div class="d-flex flex-column justify-start gap-1">
                @if (_movieDetails is null)
                {
                    <MudSkeleton Animation="Animation.Wave" Width="80%" Height="60px"/>
                    <MudSkeleton Animation="Animation.Wave" Width="30%" Height="20px"/>
                }
                else
                {
                    <MudText Typo="Typo.h3" Align="Align.Center"> @_movieDetails.Title </MudText>
                }
            </div>

            <div class="d-flex flex-row flex-wrap justify-center align-start gap-4">
                @if (_movieDetails is not null)
                {
                    <div class="d-flex flex-column justify-center align-center pa-2 mr-12">
                        <MudText Typo="Typo.button" Align="Align.Start">@_movieDetails.ReleaseDate?.ToString("dd MMM yyyy")</MudText>
                        <MudText Typo="Typo.overline">Release date</MudText>
                    </div>

                    <div class="d-flex flex-column justify-center align-center pa-2">
                        <MudText Typo="Typo.button">@DisplayHelper.DisplayValue(_movieDetails.VoteAverage, _culture)</MudText>
                        <MudText Typo="Typo.overline">TMDB Rating</MudText>
                    </div>
                }
                
                @if (_movieStats is not null) 
                {
                    <div class="rounded pa-2">
                        <div class="d-flex flex-column justify-center align-center">
                            <MudText Typo="Typo.button">@_movieStats.Watched</MudText>
                            <MudText Typo="Typo.overline">Watched</MudText>
                        </div>
                    </div>
                    
                    <div class="rounded pa-2">
                        <div class="d-flex flex-column justify-center align-center">
                            <MudText Typo="Typo.button">@_movieStats.AverageRating </MudText>
                            <MudText Typo="Typo.overline">Rating</MudText>
                        </div>
                    </div>

                    <div class="highlight-on-hover rounded pa-2 cursor-pointer">
                        <div class="d-flex flex-column justify-center align-center">
                            <MudText Typo="Typo.button">@_movieStats.ReviewsCount </MudText>
                            <MudText Typo="Typo.overline">Reviews</MudText>
                        </div>
                    </div>
                }
                
                @if (_userInformation?.ClientPrincipal is not null)
                {
                    <div class="d-flex flex-row justify-center align-center ml-12 border-solid">
                        <MudTooltip Text="@(_isMovieSaved ? "Remove from your list" : "Add the movie to your list")">
                            <MudToggleIconButton Toggled="@_isMovieSaved"
                                                 Icon="@Icons.Material.Filled.PlaylistAdd"  
                                                 ToggledIcon="@Icons.Material.Filled.PlaylistAddCheck"
                                                 @onclick="SaveRemoveMovie"/>
                        </MudTooltip>
                
                        <MudTooltip Text="Review the movie">
                            <MudIconButton Icon="@Icons.Material.Filled.ThumbUp" @onclick="OpenAddReviewModal" />
                        </MudTooltip>
                    </div>
                }
            </div>


            <MudDivider FlexItem="true"/>

            <div class="d-flex flex-column justify-start gap-1">
                <MudText Typo="Typo.h6" Align="Align.Start">Description</MudText>

                @if (_movieDetails is null)
                {
                    <MudSkeleton Class="rounded" Animation="Animation.Wave" SkeletonType="SkeletonType.Rectangle" Height="200px"/>
                }
                else
                {
                    <MudText Typo="Typo.body1" Align="Align.Start"> @_movieDetails.Description </MudText>
                }
            </div>

            <MudDivider FlexItem="true"/>

            <div class="d-flex flex-column justify-start gap-1">
                <MudText Typo="Typo.h6" Align="Align.Start">Genre</MudText>

                @if (_movieDetails is null)
                {
                    <MudSkeleton Class="rounded" Animation="Animation.Wave" SkeletonType="SkeletonType.Rectangle" Height="50px"/>
                }
                else
                {
                    <div class="d-flex flex-row flex-wrap gap-2 justify-center px-4 pb-2" style="overflow-x: auto;">
                        @foreach (var genre in _movieDetails.Genres)
                        {
                            <MudChip>@genre</MudChip>
                        }
                    </div>
                }
            </div>
            
            <div class="d-flex flex-column justify-start gap-1">
                <MudText Typo="Typo.h6" Align="Align.Start">Actors</MudText>

                <div class="d-flex flex-row gap-2 justify-space-between px-4 pb-2" style="overflow-x: auto;">
                    @if (_movieDetails is null)
                    {
                        for (var i = 0; i < 5; i++)
                        {
                            <MudSkeleton Animation="Animation.Wave" SkeletonType="SkeletonType.Circle" Width="120px" Height="120px"/>
                        }
                    }
                    else
                    {
                        foreach (var actor in _movieDetails.Actors)
                        {
                            <div class="highlight-on-hover rounded pa-2">
                                <div class="d-flex flex-column justify-start align-center cursor-pointer" @onclick="() => OpenActorDetails(actor.Id)">
                                    <MudImage Class="mud-skeleton-circle" ObjectFit="@ObjectFit.Cover" ObjectPosition="ObjectPosition.Center" Height="120" Width="120" Src="@($"api/actors/{actor.Id}/image?size=w300")" Alt="@actor.Name"/>

                                    <MudText Typo="Typo.button">@actor.Name</MudText>
                                    <MudText Typo="Typo.overline">@actor.RoleName</MudText>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>

        </MudContainer>
    </DialogContent>
</MudDialog>

@code {

    [Inject]
    protected IMoviesRepository MoviesRepository { get; set; } = default!;
    
    [Inject]
    protected ISavedMoviesRepository SavedMoviesRepository { get; set; } = default!;

    [Inject]
    protected IStatisticsRepository StatisticsRepository { get; set; } = default!;
    
    [Inject]
    protected IAuthService AuthService { get; set; } = default!;
    
    [Inject]
    protected IDialogService DialogService { get; set; } = default!;

    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public int MovieId { get; set; }

    private readonly CultureInfo _culture = CultureInfo.InvariantCulture;
    private MovieDetailsDto? _movieDetails;
    private MovieStatsDto? _movieStats; 
    private UserInformation? _userInformation;

    private bool _isMovieSaved;

    protected override async Task OnInitializedAsync()
    {
        var tasks = new[]
        {
            FetchMovieDetails(),
            FetchMovieStats(),
            FetchUserInfo()
        };
        
        await Task.WhenAll(tasks);
        
        //_isMovieSaved = await SavedMoviesRepository.IsMovieSaved(MovieId);
    }

    private async Task FetchMovieDetails() => _movieDetails = await MoviesRepository.GetMovieDetails(MovieId);
    private async Task FetchUserInfo() => _userInformation = await AuthService.RetrieveUserInformation();
    private async Task FetchMovieStats() => _movieStats = await StatisticsRepository.GetMovieStatistics(MovieId);

    private void OpenActorDetails(int actorId)
    {
        var parameters = new DialogParameters
        {
            { "ActorId", actorId }
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Small};
        DialogService.Show<ActorDetailsModal>(string.Empty, parameters, options);
    }
    
    private void OpenAddReviewModal()
    {
        var parameters = new DialogParameters
        {
            { "MovieId", MovieId }
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.ExtraSmall};
        DialogService.Show<AddReviewModal>(_movieDetails!.Title, parameters, options);
    }

    private async Task SaveRemoveMovie()
    {
        if (_isMovieSaved)
        {
            var savedMovie = new SavedMovieDto(_movieDetails!.Id, false);
            await SavedMoviesRepository.SaveMovie(savedMovie);
        }
        else
        {
            await SavedMoviesRepository.RemoveMovie(_movieDetails!.Id);
        }
        
        _isMovieSaved = await SavedMoviesRepository.IsMovieSaved(MovieId);
    }
}