@using BestMovies.Shared.Dtos.Movies
@using EventHandler = BestMovies.WebApp.Services.EventHandler

<MudCard Outlined="true" Class="bump-up-on-hover" @onclick="OpenMovieDetails">
    <MudCardHeader>
        <CardHeaderContent>
            @if (Movie is null)
            {
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="35px" Width="@($"{Width}px")" />
            }
            else
            {
                <MudText Typo="Typo.subtitle1" Align="Align.Start"><strong>@Movie.Title</strong></MudText>
            }
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent Class="cursor-pointer d-flex">
        @if (Movie is null)
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="@($"{Height}px")" Width="@($"{Width}px")"/>
        }
        else
        {
            <MudImage loading="@(LoadLazy ? "lazy" : "eager")" Class="rounded" ObjectFit="@ObjectFit.Cover" Height="@Height" Width="@Width" Src="@($"api/movies/{Movie.Id}/image?size={ImageSize}")" Alt="@Movie.Title"/>
        }
    </MudCardContent>
    <MudCardActions Class="justify-center align-center">
        @if (Movie is null)
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="20px" Width="@($"{Width}px")" />
        }
        else
        {
            <div class="d-flex flex-row flex-wrap gap-2 justify-center px-4 pb-2" style="@($"max-width: {Width}px; overflow-x: hidden;")">
                @foreach (var genre in Movie.Genres.Take(3))
                {
                    <MudText Typo="Typo.caption">@genre</MudText>
                }
            </div>
        }
    </MudCardActions>
</MudCard>



@code {
        private const string ImageSize = "w780";

    [Inject]
    protected EventHandler EventHandler { get; set; } = default!;

    [Inject]
    protected IDialogService DialogService { get; set; } = default!;

    [Parameter]
    public bool LoadLazy { get; set; }
        
    [Parameter]
    public int Height { get; set; } = 220;
    
    [Parameter]
    public int Width { get; set; } = 320;
    
    [Parameter]
    public SearchMovieDto? Movie { get; set; }
    
    private async Task OpenMovieDetails()
    {
        var parameters = new DialogParameters
        {
            {"MovieId", Movie!.Id}
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Medium};
        
        var dialog = await DialogService.ShowAsync<MovieDetailsModal>(string.Empty, parameters, options);

        await dialog.Result; 
        EventHandler.NotifyStateChanged();
    }
}