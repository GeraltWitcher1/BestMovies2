@using BestMovies.Shared.Dtos.Movies
@using BestMovies.WebApp.Models

<MudPaper Class="d-flex flex-column gap-2 pa-2" Style="background-color: transparent;" Elevation="0">
    @if (Title is not null)
    {
        <MudText Typo="Typo.h6" Align="Align.Start"> @Title </MudText>
    }
    
    <div class="d-flex flex-row justify-start gap-4" style="padding-top: 10px; overflow-x: auto">
        @if (ShowMessageIfEmpty && Movies is not null && !Movies.Any())
        {
            <MudCard Outlined="true">
                <MudAlert NoIcon="true" Severity="Severity.Normal">@MessageIfEmpty</MudAlert>
            </MudCard>
        }
        else if (Movies is null || !Movies.Any())
        {
            for (var i = 0; i < SkeletonCardsCount; i++)
            {
                <SkeletonMovieCard Width="@CardWidth" Height="@CardHeight"/>
            }
        }
        else
        {
            var count = 0;
            foreach (var movie in Movies)
            {
                @MovieCardTemplate(new MovieCardParams(count++ > 5, movie, CardWidth, CardHeight));
            }
        }
    </div>
</MudPaper>


@code {
        private const int CardHeight = 180;
        private const int CardWidth = 280;
    
    [Parameter]
    public bool ShowMessageIfEmpty { get; set; }

    [Parameter]
    public string MessageIfEmpty { get; set; } = "Movie list is empty.";

    [Parameter]
    public string? Title { get; set; } 
    
    [Parameter] 
    public IEnumerable<SearchMovieDto>? Movies { get; set; }

    [Parameter] 
    public int SkeletonCardsCount { get; set; } = 4;
    
    [Parameter]
    public RenderFragment<MovieCardParams> MovieCardTemplate { get; set; } = 
        param => @<MovieCard LoadLazy="param.LoadLazy" Movie="param.Movie" Width="param.Width" Height="param.Height"/>;

}