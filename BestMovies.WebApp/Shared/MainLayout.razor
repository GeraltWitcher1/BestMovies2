@inherits LayoutComponentBase
@using BestMovies.Shared.Dtos.Movies;
@using BestMovies.WebApp.Components
@using BestMovies.WebApp.Pages
@using BestMovies.WebApp.Repositories;

<MudThemeProvider Theme="_theme" IsDarkMode="true" />.
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1" Dense="true">
        <MudText Typo="Typo.h5">BestMovies Inc.</MudText>

        
        <MudSpacer />
        
        <SearchField ValueChanged="OnSearch"/>
        <MudIconButton Icon="@Icons.Material.Filled.Search" Color="Color.Info"
                       Class="mr-2" @onclick="ToggleSearch" />
        <div class="search-field">
            @if (_showSearch)
            {
                <input type="text" @bind-value="@_searchText" placeholder="Search">
            }
            <button @onclick="ToggleSearch" ><i class="fa fa-search"></i></button>
        </div>
        <MudIcon Icon="@Icons.Material.Rounded.Person" />
    </MudAppBar>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="my-2">
            @if (!string.IsNullOrEmpty(_searchText) && _searchedMovie?.Any() is true)
            {
                <MudContainer Class="d-flex flex-column gap-4 justify-center pa-4" MaxWidth="MaxWidth.ExtraExtraLarge">
                    <MovieCardList Title="Searched Movies" Movies="_searchedMovie" SkeletonCardsCount="5" />
                </MudContainer>
            }
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    [Inject]
    private IMoviesRepository MoviesRepository { get; set; } = default!;
    
    private IEnumerable<SearchMovieDto>? _searchedMovie;

    private bool _showSearch;
    private string _searchText = "";

    private readonly MudTheme _theme = new()
    {
        Palette = new PaletteLight
        {
            Primary = "#122b47",
            AppbarBackground = "#122b4f"
        }
    };

    private async Task ToggleSearch()
    {
        _showSearch = !_showSearch;
        if (!_showSearch) await OnSearch(_searchText);
    }


    private async Task OnSearch(string movieTitle)
    {
        Console.WriteLine($"search {movieTitle}");
        _searchedMovie = await MoviesRepository.SearchMovie(movieTitle);
        StateHasChanged();
    }
}